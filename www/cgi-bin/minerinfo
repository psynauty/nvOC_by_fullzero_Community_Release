#!/bin/bash
# minerinfo written by papampi for nvOC
# Rev 0002
# Rev 0003: papampi, Some clean up and additions
# Rev 0004: papampi, Average Hash rate for zm and ethminer
# Rev 0005: LukePicci, Relocate nvOC to arbitrary install directory
# Rev 0006: papampi, More average Hash rate and reported hash rate to WTM
# Rev 0007: papampi, Wait for watchdog to get gpu count
# Rev 0008: papampi, Individual PL, OC, MC
# Rev 0009: papampi, 1bash version alert
# Rev 0010: LuKePicci, Support pluggable miners
# Rev 0011: papampi, More miner info
# Rev 0012: papampi, T_Rex average hash rate


nvOC_minerinfo_Dev="0012"

export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done

export NVOC="$( cd "$( dirname "$SOURCE" )/../.." && pwd )"

if [[ $1 == clearalerts ]]
then
  echo "" > ${NVOC}/5_watchdoglog
  echo "" > ${NVOC}/6_autotemplog
fi

echo "Content-type: text/html"
echo ""
echo '<html>'
echo '<head>'
echo '<meta http-equiv="Content-Type" content="text/html; charset=UTF-8\n\n">'
source ${NVOC}/1bash
source ${NVOC}/helpers/coin_algo_mapping

echo '<style>; .button {background-color: black ; border: none; color: black; padding: 15px 32px;text-align: center;text-decoration: none;display: inline-block;font-size: 16px; margin: 4px 2px;cursor: pointer;}'
echo '</style>'

nvOC_1bash_temp_ver=$( cat ${NVOC}/1bash.template | grep nvOC_1bash_ver= | sed 's/nvOC_1bash_ver=//' | sed 's/\"//' | sed 's/\"//')
nvOC_BRANCH=$(cd ${NVOC};git rev-parse --abbrev-ref HEAD)

LSB_RELEASE=$(lsb_release -s -d)
UNAME=$(uname -r)
SYSTEM_BOOT_TIME=$(uptime -s)
SYSTEM_UP_TIME=$(uptime -p)

# If number gpu installed is set in 1bash give a comparison
# Reduce nvidia-smi query by trying to read from watchdog log first
if ps ax | grep -q "[5]watchdog"
then
  # Wait for Watchdog log to not give false info
  if tail -10 ${NVOC}/nvoc_logs/watchdog-screenlog.0 | grep -q "[U]tilization:"
  then
    DETECTED_GPUS=$(( $(tail -30 ${NVOC}/nvoc_logs/watchdog-screenlog.0 | grep -o "GPU[0-9]*" | sed 's/GPU//' | sort -nr | head -1) + 1 ))
    if [[ -n "$NUMBER_GPUS_INSTALLED"  ]]
    then
      if [[ $DETECTED_GPUS -ne $NUMBER_GPUS_INSTALLED ]]
      then
        GPU_COUNT="<tt style=\"text-align:left; color:red\"> $DETECTED_GPUS</tt>"
      else
        GPU_COUNT=$DETECTED_GPUS
      fi
    else
      GPU_COUNT=$DETECTED_GPUS
    fi
  else
    GPU_COUNT="Waiting for Watchdog info"
  fi
else
  if [[ -n "$NUMBER_GPUS_INSTALLED"  ]]
  then
    DETECTED_GPUS=$(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits)
    if [[ $DETECTED_GPUS -ne $NUMBER_GPUS_INSTALLED ]]
    then
      GPU_COUNT="<tt style=\"text-align:left; color:red\">$DETECTED_GPUS</tt>"
    else
      GPU_COUNT=$DETECTED_GPUS
    fi
  else
    GPU_COUNT=$DETECTED_GPUS
  fi
fi

if [[ $GPU_COUNT =~ ^[0-9.]+$ ]]
then
  TAIL_GPU_COUNT=$(( GPU_COUNT + 3 ))
else
  TAIL_GPU_COUNT="10"
fi

REBOOT_REQUIRED=$( [ -f /var/run/reboot-required ]  && echo "<tt style=\"text-align:left; color:red\">"YES!!!"</tt>" || echo "No")
MINER_PID=$(pgrep -fn "${NVOC}/miners")
MINER_UP_TIME=$(ps -p $MINER_PID  -o etime | grep -v ELAPSED)
TEMP_FAN_POWER=$(tail  -50 ${NVOC}/nvoc_logs/tempcontrol-screenlog.0  | grep GPU | awk '{gsub(/:/,": ")}1' |tail -n $GPU_COUNT | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g'  | awk '{print $0,"<br>"}' )
TEMP_ALERT_LOG=$(cat ${NVOC}/6_autotemplog | awk '{print $0,"<br>"}')
WDOG_ALERT_LOG=$(cat ${NVOC}/5_watchdoglog | awk '{print $0,"<br>"}')
#NIVIDIA_VERSION=$(nvidia-smi -i 0 --query-gpu=driver_version --format=csv,noheader)
NIVIDIA_VERSION=$(cat /proc/driver/nvidia/version | grep -o "Module.*" | awk '{print $2}')
DISK=$(df -h / | awk '{ a = $2 } END { print a }')
DISK_FREE=$(df -h / | awk '{ a = $4 } END { print a }')
MEMORY=$(free -m | head -n 2 | tail -n 1 | awk {'print $2'})
FREE_MEMORY=$(free -m | head -n 2 | tail -n 1 | awk {'print $4'})
CPU=$(cat /proc/cpuinfo | grep 'model name' | head -1 | cut -d':' -f2)
MINER_CMD=$(pgrep -afn "${NVOC}/miners" | cut -d ' ' -f 1 --complement)
MINER_PATH="$(dirname "$(pgrep -afn "${NVOC}/miners" | cut -d ' ' -f 2)")"
MINER_LOG=$(tail -n $(( $TAIL_GPU_COUNT * 2 )) ${NVOC}/nvoc_logs/screenlog.0 |  sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' |  awk '{print $0,"<br>"}')
eval 'COIN_POOL=${COIN}_POOL'
default_cuda_version=$(sed 's/CUDA Version//' "/usr/local/cuda/version.txt" )
available_cuda_versions=$(sed 's/CUDA Version//' /usr/local/cuda-{8.0,9.2}/version.txt)

# OC, MC, PL
if [[ $AUTO_SWITCH != SALFTER* ]]
then
  if [[ $POWERLIMIT_MODE == GLOBAL ]]
  then
    GPU_PL=$_POWERLIMIT_WATTS
  elif [[ $POWERLIMIT_MODE == ALGO_SPECIFIC ]]
  then
    eval 'ALGO_PL=${ALGO}_POWERLIMIT_WATTS'
    GPU_PL=${!ALGO_PL}
  fi

  if [[ $OVERCLOCK_MODE == GLOBAL ]]
  then
    GPU_OC=$_CORE_OVERCLOCK
    GPU_MC=$_MEMORY_OVERCLOCK
  elif [[ $OVERCLOCK_MODE == ALGO_SPECIFIC ]]
  then
    eval 'ALGO_OC=${ALGO}_CORE_OVERCLOCK'
    eval 'ALGO_MC=${ALGO}_MEMORY_OVERCLOCK'
    GPU_OC=${!ALGO_OC}
    GPU_MC=${!ALGO_MC}
  fi
elif [[ $AUTO_SWITCH == SALFTER* ]]
then
  GPU_PL="Salfter Switcher not supported in webinfo"
  GPU_OC="Salfter Switcher not supported in webinfo"
  GPU_MC="Salfter Switcher not supported in webinfo"
fi

# Reduce nvidia-smi query by trying to read from watchdog log first
if ps ax | grep -v grep | grep -q "[5]watchdog" && tail -10 ${NVOC}/nvoc_logs/watchdog-screenlog.0 | grep -q "[U]tilization:"
then
  GPU_UTILIZATIONS=$(tail -$TAIL_GPU_COUNT ${NVOC}/nvoc_logs/watchdog-screenlog.0  | grep -o "GPU[0-9]* Utilization: [0-9]*%" | tail -$GPU_COUNT | sed  's/ Utilization//' |sed  's/: /:/'| paste -s )
else
  GPU_UTILIZATIONS=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits)
fi


# Red load average if its higher than cpu core count
CORE=$(nproc)
AVERAGES=$(uptime | sed 's/.*: //g; s/ //g')

AVERAGE_1=$(echo "$AVERAGES" | cut -d"," -f1)
if (( $(echo  "$AVERAGE_1 > $CORE"  | bc -l) ))
then
  AVRG_1="<tt style=\"text-align:left; color:red\"> $AVERAGE_1</tt>"
else
  AVRG_1="$AVERAGE_1"
fi
AVERAGE_5=$(echo "$AVERAGES" | cut -d"," -f2)
if (( $(echo  "$AVERAGE_5 > $CORE"  | bc -l) ))
then
  AVRG_5="<tt style=\"text-align:left; color:red\"> $AVERAGE_5</tt>"
else
  AVRG_5="$AVERAGE_5"
fi
AVERAGE_15=$(echo "$AVERAGES" | cut -d"," -f3)
if (( $(echo  "$AVERAGE_15 > $CORE"  | bc -l) ))
then
  AVRG_15="<tt style=\"text-align:left; color:red\"> $AVERAGE_15</tt>"
else
  AVRG_15="$AVERAGE_15"
fi

# If number gpu installed is set in 1bash give a comparison
if [[ -n "$NUMBER_GPUS_INSTALLED"  ]]
then
  if [[ $(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits) -ne $NUMBER_GPUS_INSTALLED ]]
  then
    GPU_COUNT="<tt style=\"text-align:left; color:red\">$(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits)</tt>"
  else
    GPU_COUNT=$(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits)
  fi
else
  GPU_COUNT=$(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits)
fi

if [[ $MINER_TEMP_CONTROL == YES ]]
then
  AUTO_TEMPERATURE_CONTROL="Enabled,"
  if ps aux | grep -v grep | grep -q 6tempcontrol
  then
    TEMP_CHECK=" Running"
  else
    TEMP_CHECK="<tt style=\"text-align:left; color:red\"> Not Running</tt>"
  fi
  if (( $(stat -c%s "${NVOC}/6_autotemplog") > 1 )); then
    TEMP_WARNING="<tt style=\"text-align:left; color:red\">, WARNING</tt>"
  else
    TEMP_WARNING=", No Warning"
  fi
else
  AUTO_TEMPERATURE_CONTROL="<tt style=\"text-align:left; color:red\">Disabled</tt>"
fi

if [[ $MINER_WATCHDOG == YES ]]
then
  WATCHDOG="Enabled,"
  if ps aux | grep -v grep | grep -q 5watchdog
  then
    WDOG_CHECK=" Running"
  else
    WDOG_CHECK="<tt style=\"text-align:left; color:red\"> Not Running</tt>"
  fi
  if (( $(stat -c%s "${NVOC}/5_watchdoglog") > 1 )); then
    WATCHDOG_WARNING="<tt style=\"text-align:left; color:red\">, WARNING</tt>"
  else
    WATCHDOG_WARNING=", No Warning"
  fi
else
  WATCHDOG="<tt style=\"text-align:left; color:red\">Disabled</tt>"
fi

mbvendor=$(cat /sys/devices/virtual/dmi/id/board_vendor)
mbmodel=$(cat /sys/devices/virtual/dmi/id/board_name)
mbversion=$(cat /sys/devices/virtual/dmi/id/board_version)
biosver=$(cat /sys/devices/virtual/dmi/id/bios_version)
biosdate=$(cat /sys/devices/virtual/dmi/id/bios_date)
if [[ $mbvendor == ASUSTeK* ]]; then mbvendor="ASUS"; fi
if [[ $mbvendor == BIOSTAR* ]]; then mbvendor="BIOSTAR"; fi

#################################################################
########### Auto Switch History and current mining ##############

if [[ $AUTO_SWITCH == SALFTER_MPH_SWITCHING ]]
then
  CURRENT_COIN=$(head -n 1 ${NVOC}/current-profit)
  MINING_HISTORY=$(tail -n 5 ${NVOC}/algo_log |  awk '{print $0,"<br>"}')
  AUTO_SWITCH_TEXT="Salfter MPH Auto Switch"

elif [[ $AUTO_SWITCH == SALFTER_NICEHASH_SWITCHING ]]
then
  CURRENT_COIN=$(head -n 1 ${NVOC}/current-profit)
  MINING_HISTORY=$(tail -n 5 ${NVOC}/algo_log |  awk '{print $0,"<br>"}')
  AUTO_SWITCH_TEXT="Salfter Nicehash Auto Switch"

elif [[ $AUTO_SWITCH == SALFTER_PROGRAMATIC_SWITCHING ]]
then
  CURRENT_COIN=$(head -n 1 ${NVOC}/current-profit)
  MINING_HISTORY=$(tail -n 5 ${NVOC}/algo_log |  awk '{print $0,"<br>"}')
  AUTO_SWITCH_TEXT="Salfter Programatic Switch"

elif [[ $AUTO_SWITCH == WTM_SWITCHING ]]
then
  CURRENT_COIN=$COIN
  MINING_HISTORY=$(cat ${NVOC}/WTM_switch_history | grep 'Mining switched'|tail -n 10 |  awk '{print $0,"<br>"}')
  P_MINING_HISTORY="$MINING_HISTORY <br>"
  WTM_PROFIT=$(cat ${NVOC}/WTM_current_profit | awk '{print $0,"%"}')
  P_WTM_PROFIT="$WTM_PROFIT <br>"
  WTM_REV=$(cat ${NVOC}/WTM_current_revenue | awk '{print $0,""}')
  P_WTM_REV=$"$WTM_REV <br>"
  WTM_AVERAGE_REV=$(awk '{s+=$1}END{print "",s/NR}' RS="\n"  ${NVOC}/WTM_24H_REV)
  P_WTM_AVERAGE_REV="$WTM_AVERAGE_REV <br>"
  BTC_PRICE_VALUE=$(cat ${NVOC}/WTM_BTC_EXCHANGE_RATE | awk '{printf("%d\n",$1 + 0)}' )
  BTC_PRICE="BTC PRICE: "
  WTM_Current_Profitabilty="WTM Current Profitability:"
  WTM_Current_Revenue="WTM Current Revenue: "
  Average_Revenue="24H Average Revenue: "
  LAST_10_AUTO_SWITCHES="<br> LAST 10 AUTO SWITCHES: <br>"
  WTM_HASHRATE="WTM URL Hash Rate: "

  if ps aux | grep -v grep | grep -q 8wtm_auto_switch
  then
    WTM_SWITCH="Running"
  else
    WTM_SWITCH="<tt style=\"text-align:left; color:red\">Not Running</tt>"
  fi

#if python script syncing
  if ps aux | grep -v grep | grep -q WTM_SWITCHER
  then
    WTM_A_S="Syncing data with WTM.com"
  fi
  AUTO_SWITCH_TEXT="WTM Auto Switch $WTM_SWITCH $WTM_A_S"


elif [[ $WTM_PROFIT_CHECK == YES && $AUTO_SWITCH == "NO" ]]
then
  CURRENT_COIN=$COIN
  MINING_HISTORY=""
  WTM_PROFIT=$(cat ${NVOC}/WTM_current_profit | awk '{print $0,"%"}')
  P_WTM_PROFIT="$WTM_PROFIT <br>"
  WTM_REV=$(cat ${NVOC}/WTM_current_revenue | awk '{print $0,""}')
  P_WTM_REV=$"$WTM_REV <br>"
  WTM_SWITCH="WTM Profit Check Running. "
  BTC_PRICE_VALUE=$(cat ${NVOC}/WTM_BTC_EXCHANGE_RATE | awk '{printf("%d\n",$1 + 0)}')
  BTC_PRICE="BTC PRICE: "
  WTM_AVERAGE_REV=""
  WTM_Current_Profitabilty="WTM Current Profitability: "
  WTM_Current_Revenue="WTM Current Revenue: "
  Average_Revenue=""
  LAST_10_AUTO_SWITCHES=""
  #if python script syncing
  if ps aux | grep -v grep | grep -q WTM_SWITCHER
  then
    WTM_A_S="Syncing data with WTM.com"
  fi
  AUTO_SWITCH_TEXT="$WTM_SWITCH $WTM_A_S"

else
  CURRENT_COIN=$COIN
  AUTO_SWITCH_TEXT="No Auto Switch"
  MINING_HISTORY=""
  BTC_PRICE=""
  BTC_PRICE_VALUE=""
  WTM_PROFIT=""
  WTM_REV=""
  WTM_AVERAGE_REV=""
  WTM_CURRENCY=""
  LAST_10_AUTO_SWITCHES=""
  WTM_Current_Profitabilty=""
  WTM_Current_Revenue=""
fi

##################################################################
########################### Miner reporting ######################


hash_average="Not yet available for current miner"
miner_error="Not yet available for current miner"
rejected_shares="Not yet available for current miner"

if [[ $MINER_PID != "" && -f ${MINER_PATH}/nvoc-miner.json ]]
then
  total_hash=$(eval $(jq -r .minerinfo.total_hash ${MINER_PATH}/nvoc-miner.json))
  hash_count=$(eval $(jq -r .minerinfo.hash_count ${MINER_PATH}/nvoc-miner.json))

  solution_speed_unit=$(jq -r .minerinfo.solution_speed_unit ${MINER_PATH}/nvoc-miner.json)
  hash_average="$((total_hash / hash_count)) $solution_speed_unit"

  miner_error=$(eval $(jq -r .minerinfo.miner_error ${MINER_PATH}/nvoc-miner.json))
  rejected_shares=$(eval $(jq -r .minerinfo.rejected_shares ${MINER_PATH}/nvoc-miner.json))

elif  ps ax | grep miner | grep -q "[D]STM"
then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "==========" | grep -o "[0-9]*.[0-9]* Sol/s" | awk '{print $1}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "==========" | grep -v grep | wc -l | awk '{print $1}')
  hash_average="$((total_hash / hash_count)) Sols/s"
  miner_error=$(tail  -500 ${NVOC}/nvoc_logs/screenlog.0 | grep -E "invalid|timeout|closed" | tail -n $TAIL_GPU_COUNT |sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $0,"<br>"}')
  rejected_shares=$(tail -1000 ${NVOC}/nvoc_logs/screenlog.0 |  grep  "reject" |  awk '{print $0,"<br>"}')

elif  ps ax | grep miner | grep -q "[e]thminer"
then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Speed" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o '[0-9]*.[0-9]* Mh/s' | awk '{print$1}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Speed" | grep -v grep | wc -l | awk '{print $1}')
  hash_average="$((total_hash / hash_count)) MH/s"
  rejected_shares=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Speed" | grep -o "R[0-9]*+[0-9]*" | sed 's/R//' | tail -1)

elif  ps ax | grep miner | grep -q "[e]nergiminer"
then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Speed" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o '[0-9]*.[0-9]* Mh/s' | awk '{print$1}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Speed" | grep -v grep | wc -l | awk '{print $1}')
  hash_average="$((total_hash / hash_count)) MH/s"
  rejected_shares=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Speed" | grep -o "R[0-9]*" | sed 's/R//' | tail -1)

elif  ps ax |  grep miner | grep -q "[C]LAYMORE"
then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Total Speed:" | grep -v grep | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $5}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Total Speed:" | grep -v grep | wc -l | awk '{print $1}')
  hash_average="$((total_hash / hash_count)) MH/s"
  miner_error=$(tail -n 100 ${NVOC}/nvoc_logs/screenlog.0 |  grep "No new jobs" | tail -n $TAIL_GPU_COUNT |  sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $0,"<br>"}')
  if (( $(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep -o "Rejected: [0-9]*" | awk '{print $2}' |tail -1) > 0 ))
  then
    rejected_shares=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep -o "Rejected: [0-9]*" | tail -1 | awk '{print $2},"<br>"')
  fi

elif  ps ax | grep miner | grep -q "[K]Tccminer"
then
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | grep -v grep |  wc -l | awk '{print $1}')
  if tail -20 ${NVOC}/nvoc_logs/screenlog.0 | grep -q "[k]H/s"
  then
    total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o "[0-9]*.[0-9]* kH/s" | awk '{print $1}' | awk '{s+=$1} END {printf "%.0f", s}')
    hash_average="$((total_hash / hash_count)) kH/s"
  elif tail -20 ${NVOC}/nvoc_logs/screenlog.0 | grep -q "[M]H/s"
  then
    total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o "[0-9]*.[0-9]* MH/s" | awk '{print $1}' | awk '{s+=$1} END {printf "%.0f", s}')
    hash_average="$((total_hash / hash_count)) MH/s"
  fi

elif  ps ax | grep miner | grep -q "[T]Pccminer"
then
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | grep -v grep |  wc -l | awk '{print $1}')
  if tail -20 ${NVOC}/nvoc_logs/screenlog.0 | grep -q "[M]H/s"
  then
    total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o "[0-9]*.[0-9]* MH/s" | awk '{print $1}' | awk '{s+=$1} END {printf "%.0f", s}')
    hash_average="$((total_hash / hash_count)) MH/s"
  elif tail -20 ${NVOC}/nvoc_logs/screenlog.0 | grep -q "[k]H/s"
  then
    total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o "[0-9]*.[0-9]* kH/s" | awk '{print $1}' | awk '{s+=$1} END {printf "%.0f", s}')
    hash_average="$((total_hash / hash_count)) kH/s"
  fi

elif  ps ax | grep miner | grep -q "[S]UPRminer"
then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o "[0-9]*.[0-9]* MH/s" | awk '{print $1}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | grep -v grep |  wc -l | awk '{print $1}')
  hash_average=$((total_hash / hash_count))

elif  ps ax | grep miner | grep -q "[B]MINER"
then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep -o "Total [0-9]*" | awk '{print $2}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep -o "Total [0-9]*" | awk '{print $2}' | grep -v grep | wc -l | awk '{print $1}')
  hash_average=$((total_hash / hash_count))

elif  ps ax | grep miner | grep -q  "[Z]ENEMYminer"
then
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Shares" | wc -l | awk '{print $1}')
  if tail -20 ${NVOC}/nvoc_logs/screenlog.0 | grep -q "[M]H/s"
  then
    total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Shares" | grep "[M]H/s" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o -E "[0-9]*.[0-9]*MH/s" | sed 's:MH/s::' | awk '{s+=$1} END {printf "%.0f", s}')
    hash_average="$((total_hash / hash_count)) MH/s"
  elif tail -20 ${NVOC}/nvoc_logs/screenlog.0 | grep -q "[k]H/s"
  then
    total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Shares" | grep "[k]H/s" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o -E "[0-9]*.[0-9]*kH/s" | sed 's:kH/s::' | awk '{s+=$1} END {printf "%.0f", s}')
    hash_average="$((total_hash / hash_count)) kH/s"
  fi
  rejected_shares=$(tail -n 100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Shares:" | grep -o "R:[0-9]*.[0-9]*%" | cut -f2- -d: | tail -1)

elif  ps ax | grep miner | grep -q "[T]_Rex"
then
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "OK" | wc -l | awk '{print $1}')
  if tail -20 ${NVOC}/nvoc_logs/screenlog.0 | grep -q "[M]H/s"
  then
    total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "OK" | grep "[M]H/s" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o -E "[0-9]*.[0-9]* MH/s" | sed 's:MH/s::' | awk '{s+=$1} END {printf "%.0f", s}')
    hash_average="$((total_hash / hash_count)) MH/s"
  elif tail -20 ${NVOC}/nvoc_logs/screenlog.0 | grep -q "[k]H/s"
  then
    total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "OK" | grep "[k]H/s" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o -E "[0-9]*.[0-9]* kH/s" | sed 's:kH/s::' | awk '{s+=$1} END {printf "%.0f", s}')
    hash_average="$((total_hash / hash_count)) kH/s"
  fi
  rejected_shares=$(tail -n 50 ${NVOC}/nvoc_logs/screenlog.0 | grep "INFO" | grep -o "[0-9]*/[0-9]* Accepted" | tail -1)
  miner_error=$(tail -100  ${NVOC}/nvoc_logs/screenlog.0 | grep "ERROR" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' )

elif  ps ax | grep miner | grep -q "[Z]_EWBF"
then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Total speed" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g'  | grep -o "[0-9]*.[0-9]* Sol/s" |awk '{print $1}'| awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Total speed" | grep -v grep |  wc -l | awk '{print $1}')
  hash_average=$((total_hash / hash_count))

elif  ps ax | grep miner | grep -q "[C]ryptoDredge"
then
  hash_count=$(tail -200 ${NVOC}/nvoc_logs/screenlog.0 | grep "Accepted" | grep -v grep |  wc -l | awk '{print $1}')
  if tail -20 ${NVOC}/nvoc_logs/screenlog.0 | grep -q "[M]H/s"
  then
    total_hash=$(tail -200 ${NVOC}/nvoc_logs/screenlog.0 | grep "Accepted" | grep -o '[0-9]*.[0-9]*MH/s' | sed -r 's@MH/s@@' | awk '{s+=$1} END {printf "%.0f", s}')
    hash_average="$((total_hash / hash_count)) MH/s"
  elif tail -20 ${NVOC}/nvoc_logs/screenlog.0 | grep -q "[K]H/s"
  then
    total_hash=$(tail -200 ${NVOC}/nvoc_logs/screenlog.0 | grep "Accepted" | grep -o '[0-9]*.[0-9]*KH/s' | sed -r 's@KH/s@@' | awk '{s+=$1} END {printf "%.0f", s}')
    hash_average="$((total_hash / hash_count)) KH/s"
  fi
  rejected_shares=$(tail -200  ${NVOC}/nvoc_logs/screenlog.0  | grep -o "INFO  - [0-9]*/[0-9]*" | cut -f2- -d/ | tail -1)
  miner_error=$(tail -200  ${NVOC}/nvoc_logs/screenlog.0 | grep "ERROR" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' )
fi
##################################################################
########################### WTM Hash Rate ########################

if [[ $ALGO == ETHASH || $ALGO == ENERGI ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Beth_hr%5D=[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == EQUIHASH ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Beq_hr%5D=[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == NEOSCRYPT ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Bns_hr%5D=[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == CRYPTONIGHTV7 ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Bcn7_hr%5D=[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == CRYPTONIGHT ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Bcn_hr%5D=[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == LYRA2V2 ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Blrev2_hr%5D=[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == BITCORE ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Btt10_hr%5D=[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == X16R ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Bx16r_hr%5D=[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == X22I ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Bx22i_hr%5D=[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == XEVAN ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Bxn_hr%5D=[0-9].[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == PHI ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Bphi_hr%5D=[0-9].[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == GROESTL ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Bgro_hr%5D=[0-9].[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == LYRA2Z ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Bl2z_hr%5D=[0-9].[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == ZHASH ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Bzh_hr%5D=[0-9].[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == CRYPTONIGHTHEAVY ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Bcnh_hr%5D=[0-9].[0-9]*' | cut -f2- -d=)

elif [[ $ALGO == PHI2 ]]
then
  WTM_HASH=$(grep WTM_AUTO_SWITCH_URL ${NVOC}/1bash | grep -o '%5Bphi2_hr%5D=[0-9].[0-9]*' | cut -f2- -d=)

else
  WTM_HASH="Not Available"
fi

###################################################################
######################### BODY ####################################

echo '<body style="background-color:black; color:#ffff66;font-size: 16px ">' ; echo "<strong>"
echo "<button>"; echo '<a href="minerinfo" class="button">Refresh Miner Info</a>' ;echo "</button>" ;echo "<button>" ; echo '<a href="minerinfo?clearalerts" class="button">Clear Alerts</a>'; echo "</button>"
if [[ $1 == clearalerts ]]
then
  echo "<tt style=\"text-align:left; color:green\">Alert history cleared <br/> </tt>"
fi
echo '<title>Worker: '$WORKERNAME'</title>'
echo '</head>'
echo '<body>'
if [[ $nvOC_1bash_temp_ver != $nvOC_1bash_ver ]]
then
  echo '<h4>'  "<tt style=\"color:red;\">" 1bash and 1bash.template versions are not the same, update 1bash is strongly recommended"</tt>"  '</h4>'
fi
echo '<h3>'  "nvOC $nvOC_Ver - Community Release"
echo '<h4>'  "Worker : ""<tt style=\"color:white;\">" $WORKERNAME "</tt>"  '</h4>'

echo "Boot Time: " "<tt style=\"text-align:left; color:white; \">" "$SYSTEM_BOOT_TIME <br> </tt>"

echo "System Up Time: " "<tt style=\"text-align:left; color:white\">" "$SYSTEM_UP_TIME <br> </tt>"

echo "nvOC root path: " "<tt style=\"text-align:left; color:white\">" "${NVOC} <br> </tt>"

echo "nvOC Branch: " "<tt style=\"text-align:left; color:white\">" "$nvOC_BRANCH <br> </tt>"

echo "Miner Up Time: " "<tt style=\"text-align:left; color:white\">" "$MINER_UP_TIME<br> </tt>"

echo "Load Average: " "<tt style=\"text-align:left; color:white\">" "$AVRG_1, $AVRG_5, $AVRG_15 <br> </tt>"

echo "Auto Temp Control: "  "<tt style=\"text-align:left; color:white\">" "$AUTO_TEMPERATURE_CONTROL$TEMP_CHECK$TEMP_WARNING <br> </tt>"

echo "Watch Dog: "  "<tt style=\"text-align:left; color:white\">" "$WATCHDOG$WDOG_CHECK$WATCHDOG_WARNING <br> </tt>"

echo "Auto Switcher: " "<tt style=\"text-align:left; color:white\">" "$AUTO_SWITCH_TEXT <br></tt>"

echo "Gpu Count: " "<tt style=\"text-align:left; color:white\">" "$GPU_COUNT <br> </tt>"

echo "GPU Utilization: "  "<tt style=\"text-align:left; color:white\">" "$GPU_UTILIZATIONS <br> </tt>"

echo "Currently Mining Coin: " "<tt style=\"text-align:left; color:white\">" "$CURRENT_COIN <br> </tt>"

echo "Currently Mining ALGO: " "<tt style=\"text-align:left; color:white\">" "$ALGO <br> </tt>"

echo "Average Hash Rate: " "<tt style=\"text-align:left; color:white\">" "$hash_average <br> </tt>"
if [[ $AUTO_SWITCH == WTM_SWITCHING ]]
then
  echo "$WTM_HASHRATE" "<tt style=\"text-align:left; color:white\">" "$WTM_HASH <br> </tt>"
fi

echo "Mining Pool: " "<tt style=\"text-align:left; color:white\">" "${!COIN_POOL} <br> </tt>"

echo "Miner Command: " "<tt style=\"text-align:left; color:white\">" "$MINER_CMD <br> </tt>"

echo "Distro: " "<tt style=\"text-align:left; color:white; \">" "$LSB_RELEASE $UNAME <br> </tt>"

echo "Motherboard: " "<tt style=\"text-align:left; color:white\">" "$mbvendor, $mbmodel, $mbversion<br> </tt>"

echo "BIOS Version, Date: " "<tt style=\"text-align:left; color:white\">" "$biosver, $biosdate<br> </tt>"

echo "CPU: " "<tt style=\"text-align:left; color:white\">" "$CPU<br> </tt>"

echo "Disk / Free Disk: " "<tt style=\"text-align:left; color:white\">" "$DISK / $DISK_FREE<br> </tt>"

echo "Memory / Free Memory: " "<tt style=\"text-align:left; color:white\">" "$MEMORY / $FREE_MEMORY<br> </tt>"

echo "Available CUDA Versions: "  "<tt style=\"text-align:left; color:white\">" "$available_cuda_versions <br> </tt>"

echo "Default CUDA Version: "  "<tt style=\"text-align:left; color:white\">" "$default_cuda_version <br> </tt>"

echo "Nvidia Driver Version: "  "<tt style=\"text-align:left; color:white\">" "$NIVIDIA_VERSION <br> </tt>"

echo "Reboot Required: "  "<tt style=\"text-align:left; color:white\">" "$REBOOT_REQUIRED <br> </tt>"

echo "Power Limit Mode: " "<tt style=\"text-align:left; color:white\">" "$POWERLIMIT_MODE <br> </tt>"

if [[ $POWERLIMIT_MODE == "GPU_SPECIFIC" ]]
then
  for i in $(seq 0 $((GPU_COUNT-1)))
  do
    echo "GPU$i Power Limit: " "<tt style=\"text-align:left; color:white\">" "$((INDIVIDUAL_POWERLIMIT_$i)) <br> </tt>"
  done
elif [[ $POWERLIMIT_MODE == GLOBAL_with_GPU_OFFSET ]]
then
  for i in $(seq 0 $((GPU_COUNT-1)))
  do
    echo "GPU$i Power Limit: " "<tt style=\"text-align:left; color:white\">" "$(( _POWERLIMIT_WATTS + INDIVIDUAL_POWERLIMIT_$i )) <br> </tt>"
  done
elif [[ $POWERLIMIT_MODE == ALGO_SPECIFIC_with_GPU_OFFSET ]]
then
  for i in $(seq 0 $((GPU_COUNT-1)))
  do
    echo "GPU$i Power Limit: " "<tt style=\"text-align:left; color:white\">" "$(( ${ALGO}_POWERLIMIT_WATTS + INDIVIDUAL_POWERLIMIT_$i ))<br> </tt>"
  done
else
  echo "Power Limit: " "<tt style=\"text-align:left; color:white\">" "$GPU_PL <br> </tt>"
fi

echo "Over Clock Mode: " "<tt style=\"text-align:left; color:white\">" "$OVERCLOCK_MODE <br> </tt>"

if [[ $OVERCLOCK_MODE == "GPU_SPECIFIC" ]]
then
  for i in $(seq 0 $((GPU_COUNT-1)))
  do
    echo "GPU$i Core Overclock: " "<tt style=\"text-align:left; color:white\">" "$((__CORE_OVERCLOCK_$i)) <br> </tt>"
    echo "GPU$i Memory Overclock: " "<tt style=\"text-align:left; color:white\">" "$((MEMORY_OVERCLOCK_$i)) <br> </tt>"
  done
elif [[ $OVERCLOCK_MODE == "GLOBAL_with_GPU_OFFSET" ]]
then
  for i in $(seq 0 $((GPU_COUNT-1)))
  do
    echo "GPU$i Core Overclock: " "<tt style=\"text-align:left; color:white\">" "$(( _CORE_OVERCLOCK + __CORE_OVERCLOCK_$i)) <br> </tt>"
    echo "GPU$i Memory Overclock: " "<tt style=\"text-align:left; color:white\">" "$(( _MEMORY_OVERCLOCK + MEMORY_OVERCLOCK_$i )) <br> </tt>"
  done
elif [[ $OVERCLOCK_MODE == "ALGO_SPECIFIC_with_GPU_OFFSET" ]]
then
  for i in $(seq 0 $((GPU_COUNT-1)))
  do
    echo "GPU$i Core Overclock: " "<tt style=\"text-align:left; color:white\">" "$(( ${ALGO}_CORE_OVERCLOCK + __CORE_OVERCLOCK_$i )) <br> </tt>"
    echo "GPU$i Memory Overclock: " "<tt style=\"text-align:left; color:white\">" "$(( ${ALGO}_MEMORY_OVERCLOCK + MEMORY_OVERCLOCK_$i )) <br> </tt>"
  done
else
  echo "Core Over Clock: " "<tt style=\"text-align:left; color:white\">" "$GPU_OC <br> </tt>"
  echo "Memory Over Clock: " "<tt style=\"text-align:left; color:white\">" "$GPU_MC <br> </tt>"
fi

echo "GPU Target Temp: "  "<tt style=\"text-align:left; color:white\">" "$TARGET_TEMP <br> </tt>"

echo "GPU Minimum Fan Speed: "  "<tt style=\"text-align:left; color:white\">" "$MINIMAL_FAN_SPEED <br> </tt>"

echo "$BTC_PRICE " "<tt style=\"text-align:left; color:white\">" "$BTC_PRICE_VALUE $WTM_CURRENCY<br> </tt>"

echo "$WTM_Current_Profitabilty" "<tt style=\"text-align:left; color:white\">" "$P_WTM_PROFIT </tt>"

echo "$WTM_Current_Revenue" "<tt style=\"text-align:left; color:white\">" "$P_WTM_REV </tt>"

echo "$Average_Revenue" "<tt style=\"text-align:left; color:white\">" "$P_WTM_AVERAGE_REV   </tt>"

echo "$LAST_10_AUTO_SWITCHES  " "<tt style=\"text-align:left; color:white\">" "$P_MINING_HISTORY </tt>"

echo "Miner Hash Rate / Output: <br>" "<tt style=\"text-align:left; color:white\">" "$MINER_LOG <br> </tt>"

echo "Miner Last Errors: <br>" "<tt style=\"text-align:left; color:white\">" "$miner_error <br> </tt>"

echo "Rejected Shares: <br> " "<tt style=\"text-align:left; color:white\">" "$rejected_shares <br> </tt> <br>"

echo "GPU Temp, Fan and Power Info: <br>"  "<tt style=\"text-align:left; color:white\">" "$TEMP_FAN_POWER <br> </tt>"

echo "GPU Temp, Fan and Power Alerts: <br>"  "<tt style=\"text-align:left; color:red\">" "$TEMP_ALERT_LOG <br> $LOST_GPU <br> </tt>"

echo "Watch Dog Alerts: <br>"

echo "<button>"
echo '<a href="minerinfo?clearalerts" class="button">Clear Alerts</a>'
echo "</button>"

if [[ $1 == clearalerts ]]
then
  echo "<tt style=\"text-align:left; color:green\">Alert history cleared <br/> </tt>"
fi
echo '<br/>' "<tt style=\"text-align:left; color:red\">" "$WDOG_ALERT_LOG <br> </tt>"


echo "</strong>"
echo '</body>'

echo '</html>'

exit 0
